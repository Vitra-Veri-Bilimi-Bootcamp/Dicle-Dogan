--SQL1

--1
select title, description from film;
--2
select * from film 
where length>60 and length<75;
--3
select * from film
where rental_rate = 0.99 and replacement_cost = 12.99 or replacement_cost = 28.99;
--4 Mary Smith
select first_name, last_name from customer 
where first_name = 'Mary'
--5
select * from film
where not length > 50 and not(rental_rate = 2.99 or rental_rate = 4.99)

--SQL2
--1
select * from film
where replacement_cost between 12.99 and 16.99;
--2
select first_name, last_name from actor
where first_name in ('Penelope', 'Nick', 'Ed') --first_name = 'Penelope' or first_name = 'Ed' or first_name = 'Nick'
--3
select * from film
where (rental_rate in (0.99, 2.99, 4.99)) and (replacement_cost in (12.99, 15.99, 28.99))

--SQL3
--1
select country from country
where country ilike 'a%a'
--2
select country from country
where length(country) > 6 and country like '%n'
--3
select title from film
where title ilike 't%' or title ilike '%t' or title ilike '%t%'
--4
select * from film
where title like 'C%' and length > 90 and rental_rate = 2.99

--SQL4
--1
select distinct(replacement_cost) from film;
--2-cevap:21
select count(distinct(replacement_cost)) from film;
--3-cevap:9
select count(title) from film
where title like 'T%' and rating = 'G';
--4-cevap:13
select count(country) from country
where length(country) = 5;
--5-cevap:33
select count(city) from city
where city ilike '%r';

--SQL5
--1
select title from film
where title like '%n'
order by length desc
limit 5;
--2
select title from film
where title like '%n'
order by length 
offset 5
limit 5;
--3
select * from customer
where store_id = 1
order by last_name desc
limit 4;

--SQL6
--1
select avg(rental_rate) from film;
--2-> 92
select count(title) from film
where title like 'C%'
--3-> 184
select max(length) from film
where rental_rate = 0.99
--4-> 21
select count(distinct(replacement_cost)) from film
where length > 150

--SQL7
-1
select rating from film
group by rating;
--2
select replacement_cost, count(*) from film
group by replacement_cost
having count(*) > 50
order by count(*) desc;
--3
select store_id, count(customer_id) from customer
group by store_id;
--4
select country_id, count(city) from city
group by country_id
order by count(city) desc
limit 1;

--SQL8
update employee
set name = 'out'
where birthday > '1988-01-01';

update employee
set email = 'changed'
where id between 12 and 40

update employee
set birthday = '1988-01-27'
where name like 'D%';

update employee
set name = 'Patricia Monroe'
where id = 38;

update employee
set name = 'Patricia Monroe'
where id = 38;
---------------------------------------
delete from employee
where id > 49
returning *;

delete from employee
where email like '%ma%'
returning *;

delete from employee
where id between 16 and 18
returning *;

delete from employee
where birthday > '1995-12-01'
returning *;

delete from employee
where name like '%lai%'
returning *;

--SQL9
--1
select * from city;
select * from country;
select city, country from city
inner join country on city.country_id = country.country_id;
--2
select * from customer;
select * from payment;
select first_name, last_name, payment_id from customer
inner join payment on customer.customer_id = payment.customer_id;
--3
select * from rental;
select first_name, last_name, rental_id from customer
inner join rental on customer.customer_id = rental.customer_id;

--SQL10
--1
select * from city;
select * from country;
select city, country from city
left join country on city.country_id = country.country_id;
--2
select * from customer;
select * from payment;
select first_name, last_name, payment_id from customer
right join payment on customer.customer_id = payment.customer_id;
--3
select * from rental;
select first_name, last_name, rental_id from customer
full join rental on customer.customer_id = rental.customer_id;

--SQL11
--1
(select first_name from customer)
union
(select first_name from actor)
--2
(select first_name from customer)
intersect
(select first_name from actor)
--3
(select first_name from actor)
except
(select first_name from customer)
--4
(select first_name from customer)
union all
(select first_name from actor)
--2 ve 3. sorgularda tekrarlanan değerler için yapmamız sonuçları değiştirmeyecektir

--SQL12
--1
select length, title from film
where length > all
(select avg(length) from film);
--2
select count(*) from film
where rental_rate = 
(select max(rental_rate) from film);
--3
select title from film
where rental_rate = 
(select min(rental_rate) from film)
and replacement_cost=
(select min(replacement_cost) from film);
--4
select customer_id, (select sum(amount) from payment) toplam from payment
group by customer_id
order by toplam
